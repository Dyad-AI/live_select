export default{LiveSelect:{textInput(){return this.el.querySelector("input[type=text]")},attachDomEventHandlers(){this.textInput().onkeydown=t=>{t.code==="Enter"&&t.preventDefault(),this.pushEventTo(this.el,"keydown",{key:t.code})},this.el.querySelector("ul").onmousedown=t=>{t.target.dataset.idx&&(this.textInput().blur(),this.pushEventTo(this.el,"option_click",{idx:t.target.dataset.idx}))}},setInputValue(t,{focus:e,blur:n}){this.textInput().value=t,e?this.textInput().focus():n&&this.textInput().blur()},inputEvent(t,e){const n=e==="single"?"input.hidden":t.length===0?"input[name=live_select_empty_selection]":"input[type=hidden]";this.el.querySelector(n).dispatchEvent(new Event("input",{bubbles:!0}))},mounted(){this.handleEvent("select",({id:t,selection:e,mode:n,focus:i,blur:l,input_event:s})=>{if(console.log({id:t,selection:e,mode:n,focus:i,blur:l,input_event:s}),this.el.id===t){if(n==="single"){const u=e.length>0?e[0].label:null;this.setInputValue(u,{focus:i,blur:l})}else this.setInputValue(null,{focus:i,blur:l});s&&this.inputEvent(e,n)}}),this.attachDomEventHandlers()},updated(){this.attachDomEventHandlers()}}};
