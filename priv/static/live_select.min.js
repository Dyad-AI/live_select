export default{LiveSelect:{textInput(){return this.el.querySelector("input[type=text]")},debounceMsec(){return parseInt(this.el.dataset.debounce)},updateMinLen(){return parseInt(this.el.dataset.updateMinLen)},maybeStyleClearButton(){const e=this.el.querySelector("button[phx-click=clear]");e&&(this.textInput().style.position="relative",e.style.position="absolute",e.style.top="0px",e.style.bottom="0px",e.style.right="5px")},pushEventToParent(e,t){const s=this.el.dataset.phxTarget;s?this.pushEventTo(s,e,t):this.pushEvent(e,t)},attachDomEventHandlers(){this.textInput().onkeydown=t=>{t.code==="Enter"&&t.preventDefault(),this.pushEventTo(this.el,"keydown",{key:t.code})},this.textInput().oninput=t=>{const s=t.target.value.trim(),n=this.el.dataset.textInputField;s.length>=this.updateMinLen()?this.debounce(()=>{this.pushEventTo(this.el,"change",{text:s}),this.pushEventToParent("live_select_change",{id:this.el.id,field:n,text:s})},this.debounceMsec())():this.pushEventTo(this.el,"options_clear",{})};const e=this.el.querySelector("ul");e&&(e.onmousedown=t=>{const s=t.target.closest("div[data-idx]");s&&(this.textInput().blur(),this.pushEventTo(this.el,"option_click",{idx:s.dataset.idx}))})},setInputValue(e,{focus:t}){this.textInput().value=e,t&&this.textInput().focus()},inputEvent(e,t){const s=t==="single"?"input[class=single-mode]":e.length===0?"input[name=live_select_empty_selection]":"input[type=hidden]";this.el.querySelector(s).dispatchEvent(new Event("input",{bubbles:!0}))},mounted(){this.maybeStyleClearButton(),this.handleEvent("select",({id:e,selection:t,mode:s,focus:n,input_event:i})=>{if(this.el.id===e){if(s==="single"){const l=t.length>0?t[0].label:null;this.setInputValue(l,{focus:n})}else this.setInputValue(null,{focus:n});i&&this.inputEvent(t,s)}}),this.attachDomEventHandlers()},updated(){this.maybeStyleClearButton(),this.attachDomEventHandlers()},debounce(e,t){let s;return(...n)=>{clearTimeout(s),s=setTimeout(()=>{e.apply(this,n)},t)}}}};
